// <auto-generated />
using System;
using Anidream.Api.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Anidream.Api.DataAccess.Migrations
{
    [DbContext(typeof(AnidreamContext))]
    [Migration("20250907054339_Change optional for ReleaseDate in Media table")]
    partial class ChangeoptionalforReleaseDateinMediatable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Anidream.Api.Domain.Entities.Director", b =>
                {
                    b.Property<Guid>("DirectorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("director_id");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("full_name");

                    b.HasKey("DirectorId")
                        .HasName("pk_directors");

                    b.ToTable("Directors", (string)null);
                });

            modelBuilder.Entity("Anidream.Api.Domain.Entities.Media", b =>
                {
                    b.Property<Guid>("MediaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("media_id");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("alias");

                    b.Property<int?>("CurrentEpisodes")
                        .HasColumnType("integer")
                        .HasColumnName("current_episodes");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid?>("DirectorId")
                        .HasColumnType("uuid")
                        .HasColumnName("director_id");

                    b.Property<bool>("HasImage")
                        .HasColumnType("boolean")
                        .HasColumnName("has_image");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision")
                        .HasColumnName("rating");

                    b.Property<DateOnly>("ReleaseDate")
                        .HasColumnType("date")
                        .HasColumnName("release_date");

                    b.Property<Guid?>("StudioId")
                        .HasColumnType("uuid")
                        .HasColumnName("studio_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("title");

                    b.Property<int?>("TotalEpisodes")
                        .HasColumnType("integer")
                        .HasColumnName("total_episodes");

                    b.HasKey("MediaId")
                        .HasName("pk_medias");

                    b.HasIndex("DirectorId")
                        .HasDatabaseName("ix_medias_director_id");

                    b.HasIndex("StudioId")
                        .HasDatabaseName("ix_medias_studio_id");

                    b.ToTable("Medias", (string)null);
                });

            modelBuilder.Entity("Anidream.Api.Domain.Entities.Studio", b =>
                {
                    b.Property<Guid>("StudioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("studio_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title");

                    b.HasKey("StudioId")
                        .HasName("pk_studios");

                    b.ToTable("Studios", (string)null);
                });

            modelBuilder.Entity("Anidream.Api.Domain.Entities.Media", b =>
                {
                    b.HasOne("Anidream.Api.Domain.Entities.Director", "Director")
                        .WithMany("Medias")
                        .HasForeignKey("DirectorId")
                        .HasConstraintName("fk_medias_director_director_id");

                    b.HasOne("Anidream.Api.Domain.Entities.Studio", "Studio")
                        .WithMany("Medias")
                        .HasForeignKey("StudioId")
                        .HasConstraintName("fk_medias_studio_studio_id");

                    b.Navigation("Director");

                    b.Navigation("Studio");
                });

            modelBuilder.Entity("Anidream.Api.Domain.Entities.Director", b =>
                {
                    b.Navigation("Medias");
                });

            modelBuilder.Entity("Anidream.Api.Domain.Entities.Studio", b =>
                {
                    b.Navigation("Medias");
                });
#pragma warning restore 612, 618
        }
    }
}
